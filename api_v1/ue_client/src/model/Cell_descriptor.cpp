/**
 * UE Control API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ue_client/model/Cell_descriptor.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Cell_descriptor::Cell_descriptor()
{
    m_Mnc = utility::conversions::to_string_t("");
    m_MncIsSet = false;
    m_Mcc = utility::conversions::to_string_t("");
    m_MccIsSet = false;
    m_Nodeb_id = 0;
    m_Nodeb_idIsSet = false;
}

Cell_descriptor::~Cell_descriptor()
{
}

void Cell_descriptor::validate()
{
    // TODO: implement validation
}

web::json::value Cell_descriptor::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MncIsSet)
    {
        val[utility::conversions::to_string_t(U("mnc"))] = ModelBase::toJson(m_Mnc);
    }
    if(m_MccIsSet)
    {
        val[utility::conversions::to_string_t(U("mcc"))] = ModelBase::toJson(m_Mcc);
    }
    if(m_Nodeb_idIsSet)
    {
        val[utility::conversions::to_string_t(U("nodeb_id"))] = ModelBase::toJson(m_Nodeb_id);
    }

    return val;
}

bool Cell_descriptor::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mnc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mnc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMnc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMnc);
            setMnc(refVal_setMnc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcc);
            setMcc(refVal_setMcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodeb_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodeb_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNodebId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodebId);
            setNodebId(refVal_setNodebId);
        }
    }
    return ok;
}

void Cell_descriptor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MncIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mnc")), m_Mnc));
    }
    if(m_MccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcc")), m_Mcc));
    }
    if(m_Nodeb_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodeb_id")), m_Nodeb_id));
    }
}

bool Cell_descriptor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mnc"))))
    {
        utility::string_t refVal_setMnc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mnc"))), refVal_setMnc );
        setMnc(refVal_setMnc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcc"))))
    {
        utility::string_t refVal_setMcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcc"))), refVal_setMcc );
        setMcc(refVal_setMcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodeb_id"))))
    {
        int32_t refVal_setNodebId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodeb_id"))), refVal_setNodebId );
        setNodebId(refVal_setNodebId);
    }
    return ok;
}

utility::string_t Cell_descriptor::getMnc() const
{
    return m_Mnc;
}

void Cell_descriptor::setMnc(const utility::string_t& value)
{
    m_Mnc = value;
    m_MncIsSet = true;
}

bool Cell_descriptor::mncIsSet() const
{
    return m_MncIsSet;
}

void Cell_descriptor::unsetMnc()
{
    m_MncIsSet = false;
}
utility::string_t Cell_descriptor::getMcc() const
{
    return m_Mcc;
}

void Cell_descriptor::setMcc(const utility::string_t& value)
{
    m_Mcc = value;
    m_MccIsSet = true;
}

bool Cell_descriptor::mccIsSet() const
{
    return m_MccIsSet;
}

void Cell_descriptor::unsetMcc()
{
    m_MccIsSet = false;
}
int32_t Cell_descriptor::getNodebId() const
{
    return m_Nodeb_id;
}

void Cell_descriptor::setNodebId(int32_t value)
{
    m_Nodeb_id = value;
    m_Nodeb_idIsSet = true;
}

bool Cell_descriptor::nodebIdIsSet() const
{
    return m_Nodeb_idIsSet;
}

void Cell_descriptor::unsetNodeb_id()
{
    m_Nodeb_idIsSet = false;
}
}
}
}
}


