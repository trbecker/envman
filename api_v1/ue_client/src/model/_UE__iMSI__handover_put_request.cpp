/**
 * UE Control API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ue_client/model/_UE__iMSI__handover_put_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



_UE__iMSI__handover_put_request::_UE__iMSI__handover_put_request()
{
    m_Target_cellIsSet = false;
}

_UE__iMSI__handover_put_request::~_UE__iMSI__handover_put_request()
{
}

void _UE__iMSI__handover_put_request::validate()
{
    // TODO: implement validation
}

web::json::value _UE__iMSI__handover_put_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Target_cellIsSet)
    {
        val[utility::conversions::to_string_t(U("target_cell"))] = ModelBase::toJson(m_Target_cell);
    }

    return val;
}

bool _UE__iMSI__handover_put_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("target_cell"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target_cell")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cell_descriptor> refVal_setTargetCell;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTargetCell);
            setTargetCell(refVal_setTargetCell);
        }
    }
    return ok;
}

void _UE__iMSI__handover_put_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Target_cellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target_cell")), m_Target_cell));
    }
}

bool _UE__iMSI__handover_put_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("target_cell"))))
    {
        std::shared_ptr<Cell_descriptor> refVal_setTargetCell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target_cell"))), refVal_setTargetCell );
        setTargetCell(refVal_setTargetCell);
    }
    return ok;
}

std::shared_ptr<Cell_descriptor> _UE__iMSI__handover_put_request::getTargetCell() const
{
    return m_Target_cell;
}

void _UE__iMSI__handover_put_request::setTargetCell(const std::shared_ptr<Cell_descriptor>& value)
{
    m_Target_cell = value;
    m_Target_cellIsSet = true;
}

bool _UE__iMSI__handover_put_request::targetCellIsSet() const
{
    return m_Target_cellIsSet;
}

void _UE__iMSI__handover_put_request::unsetTarget_cell()
{
    m_Target_cellIsSet = false;
}
}
}
}
}


